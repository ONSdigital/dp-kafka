// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package kafkatest

import (
	"context"
	health "github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-kafka/v2"
	"sync"
)

// Ensure, that IConsumerGroupMock does implement kafka.IConsumerGroup.
// If this is not the case, regenerate this file with moq.
var _ kafka.IConsumerGroup = &IConsumerGroupMock{}

// IConsumerGroupMock is a mock implementation of kafka.IConsumerGroup.
//
// 	func TestSomethingThatUsesIConsumerGroup(t *testing.T) {
//
// 		// make and configure a mocked kafka.IConsumerGroup
// 		mockedIConsumerGroup := &IConsumerGroupMock{
// 			ChannelsFunc: func() *kafka.ConsumerGroupChannels {
// 				panic("mock out the Channels method")
// 			},
// 			CheckerFunc: func(ctx context.Context, state *health.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			CloseFunc: func(ctx context.Context, optFuncs ...kafka.OptFunc) error {
// 				panic("mock out the Close method")
// 			},
// 			InitialiseFunc: func(ctx context.Context) error {
// 				panic("mock out the Initialise method")
// 			},
// 			IsInitialisedFunc: func() bool {
// 				panic("mock out the IsInitialised method")
// 			},
// 			StopListeningToConsumerFunc: func(ctx context.Context) error {
// 				panic("mock out the StopListeningToConsumer method")
// 			},
// 		}
//
// 		// use mockedIConsumerGroup in code that requires kafka.IConsumerGroup
// 		// and then make assertions.
//
// 	}
type IConsumerGroupMock struct {
	// ChannelsFunc mocks the Channels method.
	ChannelsFunc func() *kafka.ConsumerGroupChannels

	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *health.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context, optFuncs ...kafka.OptFunc) error

	// InitialiseFunc mocks the Initialise method.
	InitialiseFunc func(ctx context.Context) error

	// IsInitialisedFunc mocks the IsInitialised method.
	IsInitialisedFunc func() bool

	// StopListeningToConsumerFunc mocks the StopListeningToConsumer method.
	StopListeningToConsumerFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Channels holds details about calls to the Channels method.
		Channels []struct {
		}
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *health.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OptFuncs is the optFuncs argument value.
			OptFuncs []kafka.OptFunc
		}
		// Initialise holds details about calls to the Initialise method.
		Initialise []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// IsInitialised holds details about calls to the IsInitialised method.
		IsInitialised []struct {
		}
		// StopListeningToConsumer holds details about calls to the StopListeningToConsumer method.
		StopListeningToConsumer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockChannels                sync.RWMutex
	lockChecker                 sync.RWMutex
	lockClose                   sync.RWMutex
	lockInitialise              sync.RWMutex
	lockIsInitialised           sync.RWMutex
	lockStopListeningToConsumer sync.RWMutex
}

// Channels calls ChannelsFunc.
func (mock *IConsumerGroupMock) Channels() *kafka.ConsumerGroupChannels {
	if mock.ChannelsFunc == nil {
		panic("IConsumerGroupMock.ChannelsFunc: method is nil but IConsumerGroup.Channels was just called")
	}
	callInfo := struct {
	}{}
	mock.lockChannels.Lock()
	mock.calls.Channels = append(mock.calls.Channels, callInfo)
	mock.lockChannels.Unlock()
	return mock.ChannelsFunc()
}

// ChannelsCalls gets all the calls that were made to Channels.
// Check the length with:
//     len(mockedIConsumerGroup.ChannelsCalls())
func (mock *IConsumerGroupMock) ChannelsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockChannels.RLock()
	calls = mock.calls.Channels
	mock.lockChannels.RUnlock()
	return calls
}

// Checker calls CheckerFunc.
func (mock *IConsumerGroupMock) Checker(ctx context.Context, state *health.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("IConsumerGroupMock.CheckerFunc: method is nil but IConsumerGroup.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *health.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedIConsumerGroup.CheckerCalls())
func (mock *IConsumerGroupMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *health.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *health.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *IConsumerGroupMock) Close(ctx context.Context, optFuncs ...kafka.OptFunc) error {
	if mock.CloseFunc == nil {
		panic("IConsumerGroupMock.CloseFunc: method is nil but IConsumerGroup.Close was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		OptFuncs []kafka.OptFunc
	}{
		Ctx:      ctx,
		OptFuncs: optFuncs,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(ctx, optFuncs...)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedIConsumerGroup.CloseCalls())
func (mock *IConsumerGroupMock) CloseCalls() []struct {
	Ctx      context.Context
	OptFuncs []kafka.OptFunc
} {
	var calls []struct {
		Ctx      context.Context
		OptFuncs []kafka.OptFunc
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Initialise calls InitialiseFunc.
func (mock *IConsumerGroupMock) Initialise(ctx context.Context) error {
	if mock.InitialiseFunc == nil {
		panic("IConsumerGroupMock.InitialiseFunc: method is nil but IConsumerGroup.Initialise was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockInitialise.Lock()
	mock.calls.Initialise = append(mock.calls.Initialise, callInfo)
	mock.lockInitialise.Unlock()
	return mock.InitialiseFunc(ctx)
}

// InitialiseCalls gets all the calls that were made to Initialise.
// Check the length with:
//     len(mockedIConsumerGroup.InitialiseCalls())
func (mock *IConsumerGroupMock) InitialiseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockInitialise.RLock()
	calls = mock.calls.Initialise
	mock.lockInitialise.RUnlock()
	return calls
}

// IsInitialised calls IsInitialisedFunc.
func (mock *IConsumerGroupMock) IsInitialised() bool {
	if mock.IsInitialisedFunc == nil {
		panic("IConsumerGroupMock.IsInitialisedFunc: method is nil but IConsumerGroup.IsInitialised was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsInitialised.Lock()
	mock.calls.IsInitialised = append(mock.calls.IsInitialised, callInfo)
	mock.lockIsInitialised.Unlock()
	return mock.IsInitialisedFunc()
}

// IsInitialisedCalls gets all the calls that were made to IsInitialised.
// Check the length with:
//     len(mockedIConsumerGroup.IsInitialisedCalls())
func (mock *IConsumerGroupMock) IsInitialisedCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsInitialised.RLock()
	calls = mock.calls.IsInitialised
	mock.lockIsInitialised.RUnlock()
	return calls
}

// StopListeningToConsumer calls StopListeningToConsumerFunc.
func (mock *IConsumerGroupMock) StopListeningToConsumer(ctx context.Context) error {
	if mock.StopListeningToConsumerFunc == nil {
		panic("IConsumerGroupMock.StopListeningToConsumerFunc: method is nil but IConsumerGroup.StopListeningToConsumer was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockStopListeningToConsumer.Lock()
	mock.calls.StopListeningToConsumer = append(mock.calls.StopListeningToConsumer, callInfo)
	mock.lockStopListeningToConsumer.Unlock()
	return mock.StopListeningToConsumerFunc(ctx)
}

// StopListeningToConsumerCalls gets all the calls that were made to StopListeningToConsumer.
// Check the length with:
//     len(mockedIConsumerGroup.StopListeningToConsumerCalls())
func (mock *IConsumerGroupMock) StopListeningToConsumerCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockStopListeningToConsumer.RLock()
	calls = mock.calls.StopListeningToConsumer
	mock.lockStopListeningToConsumer.RUnlock()
	return calls
}
