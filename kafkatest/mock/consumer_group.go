// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-kafka/v3/consumer"
	"sync"
)

var (
	lockConsumerGroupMockChannels             sync.RWMutex
	lockConsumerGroupMockChecker              sync.RWMutex
	lockConsumerGroupMockClose                sync.RWMutex
	lockConsumerGroupMockInitialise           sync.RWMutex
	lockConsumerGroupMockIsInitialised        sync.RWMutex
	lockConsumerGroupMockLogErrors            sync.RWMutex
	lockConsumerGroupMockRegisterBatchHandler sync.RWMutex
	lockConsumerGroupMockRegisterHandler      sync.RWMutex
	lockConsumerGroupMockStart                sync.RWMutex
	lockConsumerGroupMockState                sync.RWMutex
	lockConsumerGroupMockStop                 sync.RWMutex
)

// ConsumerGroupMock is a mock implementation of kafkatest.ConsumerGroup.
//
//     func TestSomethingThatUsesConsumerGroup(t *testing.T) {
//
//         // make and configure a mocked kafkatest.ConsumerGroup
//         mockedConsumerGroup := &ConsumerGroupMock{
//             ChannelsFunc: func() *consumer.ConsumerGroupChannels {
// 	               panic("mock out the Channels method")
//             },
//             CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
// 	               panic("mock out the Checker method")
//             },
//             CloseFunc: func(ctx context.Context) error {
// 	               panic("mock out the Close method")
//             },
//             InitialiseFunc: func(ctx context.Context) error {
// 	               panic("mock out the Initialise method")
//             },
//             IsInitialisedFunc: func() bool {
// 	               panic("mock out the IsInitialised method")
//             },
//             LogErrorsFunc: func(ctx context.Context)  {
// 	               panic("mock out the LogErrors method")
//             },
//             RegisterBatchHandlerFunc: func(ctx context.Context, batchHandler consumer.BatchHandler) error {
// 	               panic("mock out the RegisterBatchHandler method")
//             },
//             RegisterHandlerFunc: func(ctx context.Context, h consumer.Handler) error {
// 	               panic("mock out the RegisterHandler method")
//             },
//             StartFunc: func() error {
// 	               panic("mock out the Start method")
//             },
//             StateFunc: func() string {
// 	               panic("mock out the State method")
//             },
//             StopFunc: func()  {
// 	               panic("mock out the Stop method")
//             },
//         }
//
//         // use mockedConsumerGroup in code that requires kafkatest.ConsumerGroup
//         // and then make assertions.
//
//     }
type ConsumerGroupMock struct {
	// ChannelsFunc mocks the Channels method.
	ChannelsFunc func() *consumer.Channels

	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// InitialiseFunc mocks the Initialise method.
	InitialiseFunc func(ctx context.Context) error

	// IsInitialisedFunc mocks the IsInitialised method.
	IsInitialisedFunc func() bool

	// LogErrorsFunc mocks the LogErrors method.
	LogErrorsFunc func(ctx context.Context)

	// RegisterBatchHandlerFunc mocks the RegisterBatchHandler method.
	RegisterBatchHandlerFunc func(ctx context.Context, batchHandler consumer.BatchHandler) error

	// RegisterHandlerFunc mocks the RegisterHandler method.
	RegisterHandlerFunc func(ctx context.Context, h consumer.Handler) error

	// StartFunc mocks the Start method.
	StartFunc func() error

	// StateFunc mocks the State method.
	StateFunc func() string

	// StopFunc mocks the Stop method.
	StopFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// Channels holds details about calls to the Channels method.
		Channels []struct {
		}
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Initialise holds details about calls to the Initialise method.
		Initialise []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// IsInitialised holds details about calls to the IsInitialised method.
		IsInitialised []struct {
		}
		// LogErrors holds details about calls to the LogErrors method.
		LogErrors []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// RegisterBatchHandler holds details about calls to the RegisterBatchHandler method.
		RegisterBatchHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// BatchHandler is the batchHandler argument value.
			BatchHandler consumer.BatchHandler
		}
		// RegisterHandler holds details about calls to the RegisterHandler method.
		RegisterHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// H is the h argument value.
			H consumer.Handler
		}
		// Start holds details about calls to the Start method.
		Start []struct {
		}
		// State holds details about calls to the State method.
		State []struct {
		}
		// Stop holds details about calls to the Stop method.
		Stop []struct {
		}
	}
}

// Channels calls ChannelsFunc.
func (mock *ConsumerGroupMock) Channels() *consumer.Channels {
	if mock.ChannelsFunc == nil {
		panic("ConsumerGroupMock.ChannelsFunc: method is nil but ConsumerGroup.Channels was just called")
	}
	callInfo := struct {
	}{}
	lockConsumerGroupMockChannels.Lock()
	mock.calls.Channels = append(mock.calls.Channels, callInfo)
	lockConsumerGroupMockChannels.Unlock()
	return mock.ChannelsFunc()
}

// ChannelsCalls gets all the calls that were made to Channels.
// Check the length with:
//     len(mockedConsumerGroup.ChannelsCalls())
func (mock *ConsumerGroupMock) ChannelsCalls() []struct {
} {
	var calls []struct {
	}
	lockConsumerGroupMockChannels.RLock()
	calls = mock.calls.Channels
	lockConsumerGroupMockChannels.RUnlock()
	return calls
}

// Checker calls CheckerFunc.
func (mock *ConsumerGroupMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("ConsumerGroupMock.CheckerFunc: method is nil but ConsumerGroup.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	lockConsumerGroupMockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	lockConsumerGroupMockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedConsumerGroup.CheckerCalls())
func (mock *ConsumerGroupMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	lockConsumerGroupMockChecker.RLock()
	calls = mock.calls.Checker
	lockConsumerGroupMockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *ConsumerGroupMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("ConsumerGroupMock.CloseFunc: method is nil but ConsumerGroup.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockConsumerGroupMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockConsumerGroupMockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedConsumerGroup.CloseCalls())
func (mock *ConsumerGroupMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockConsumerGroupMockClose.RLock()
	calls = mock.calls.Close
	lockConsumerGroupMockClose.RUnlock()
	return calls
}

// Initialise calls InitialiseFunc.
func (mock *ConsumerGroupMock) Initialise(ctx context.Context) error {
	if mock.InitialiseFunc == nil {
		panic("ConsumerGroupMock.InitialiseFunc: method is nil but ConsumerGroup.Initialise was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockConsumerGroupMockInitialise.Lock()
	mock.calls.Initialise = append(mock.calls.Initialise, callInfo)
	lockConsumerGroupMockInitialise.Unlock()
	return mock.InitialiseFunc(ctx)
}

// InitialiseCalls gets all the calls that were made to Initialise.
// Check the length with:
//     len(mockedConsumerGroup.InitialiseCalls())
func (mock *ConsumerGroupMock) InitialiseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockConsumerGroupMockInitialise.RLock()
	calls = mock.calls.Initialise
	lockConsumerGroupMockInitialise.RUnlock()
	return calls
}

// IsInitialised calls IsInitialisedFunc.
func (mock *ConsumerGroupMock) IsInitialised() bool {
	if mock.IsInitialisedFunc == nil {
		panic("ConsumerGroupMock.IsInitialisedFunc: method is nil but ConsumerGroup.IsInitialised was just called")
	}
	callInfo := struct {
	}{}
	lockConsumerGroupMockIsInitialised.Lock()
	mock.calls.IsInitialised = append(mock.calls.IsInitialised, callInfo)
	lockConsumerGroupMockIsInitialised.Unlock()
	return mock.IsInitialisedFunc()
}

// IsInitialisedCalls gets all the calls that were made to IsInitialised.
// Check the length with:
//     len(mockedConsumerGroup.IsInitialisedCalls())
func (mock *ConsumerGroupMock) IsInitialisedCalls() []struct {
} {
	var calls []struct {
	}
	lockConsumerGroupMockIsInitialised.RLock()
	calls = mock.calls.IsInitialised
	lockConsumerGroupMockIsInitialised.RUnlock()
	return calls
}

// LogErrors calls LogErrorsFunc.
func (mock *ConsumerGroupMock) LogErrors(ctx context.Context) {
	if mock.LogErrorsFunc == nil {
		panic("ConsumerGroupMock.LogErrorsFunc: method is nil but ConsumerGroup.LogErrors was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockConsumerGroupMockLogErrors.Lock()
	mock.calls.LogErrors = append(mock.calls.LogErrors, callInfo)
	lockConsumerGroupMockLogErrors.Unlock()
	mock.LogErrorsFunc(ctx)
}

// LogErrorsCalls gets all the calls that were made to LogErrors.
// Check the length with:
//     len(mockedConsumerGroup.LogErrorsCalls())
func (mock *ConsumerGroupMock) LogErrorsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockConsumerGroupMockLogErrors.RLock()
	calls = mock.calls.LogErrors
	lockConsumerGroupMockLogErrors.RUnlock()
	return calls
}

// RegisterBatchHandler calls RegisterBatchHandlerFunc.
func (mock *ConsumerGroupMock) RegisterBatchHandler(ctx context.Context, batchHandler consumer.BatchHandler) error {
	if mock.RegisterBatchHandlerFunc == nil {
		panic("ConsumerGroupMock.RegisterBatchHandlerFunc: method is nil but ConsumerGroup.RegisterBatchHandler was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		BatchHandler consumer.BatchHandler
	}{
		Ctx:          ctx,
		BatchHandler: batchHandler,
	}
	lockConsumerGroupMockRegisterBatchHandler.Lock()
	mock.calls.RegisterBatchHandler = append(mock.calls.RegisterBatchHandler, callInfo)
	lockConsumerGroupMockRegisterBatchHandler.Unlock()
	return mock.RegisterBatchHandlerFunc(ctx, batchHandler)
}

// RegisterBatchHandlerCalls gets all the calls that were made to RegisterBatchHandler.
// Check the length with:
//     len(mockedConsumerGroup.RegisterBatchHandlerCalls())
func (mock *ConsumerGroupMock) RegisterBatchHandlerCalls() []struct {
	Ctx          context.Context
	BatchHandler consumer.BatchHandler
} {
	var calls []struct {
		Ctx          context.Context
		BatchHandler consumer.BatchHandler
	}
	lockConsumerGroupMockRegisterBatchHandler.RLock()
	calls = mock.calls.RegisterBatchHandler
	lockConsumerGroupMockRegisterBatchHandler.RUnlock()
	return calls
}

// RegisterHandler calls RegisterHandlerFunc.
func (mock *ConsumerGroupMock) RegisterHandler(ctx context.Context, h consumer.Handler) error {
	if mock.RegisterHandlerFunc == nil {
		panic("ConsumerGroupMock.RegisterHandlerFunc: method is nil but ConsumerGroup.RegisterHandler was just called")
	}
	callInfo := struct {
		Ctx context.Context
		H   consumer.Handler
	}{
		Ctx: ctx,
		H:   h,
	}
	lockConsumerGroupMockRegisterHandler.Lock()
	mock.calls.RegisterHandler = append(mock.calls.RegisterHandler, callInfo)
	lockConsumerGroupMockRegisterHandler.Unlock()
	return mock.RegisterHandlerFunc(ctx, h)
}

// RegisterHandlerCalls gets all the calls that were made to RegisterHandler.
// Check the length with:
//     len(mockedConsumerGroup.RegisterHandlerCalls())
func (mock *ConsumerGroupMock) RegisterHandlerCalls() []struct {
	Ctx context.Context
	H   consumer.Handler
} {
	var calls []struct {
		Ctx context.Context
		H   consumer.Handler
	}
	lockConsumerGroupMockRegisterHandler.RLock()
	calls = mock.calls.RegisterHandler
	lockConsumerGroupMockRegisterHandler.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *ConsumerGroupMock) Start() error {
	if mock.StartFunc == nil {
		panic("ConsumerGroupMock.StartFunc: method is nil but ConsumerGroup.Start was just called")
	}
	callInfo := struct {
	}{}
	lockConsumerGroupMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockConsumerGroupMockStart.Unlock()
	return mock.StartFunc()
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedConsumerGroup.StartCalls())
func (mock *ConsumerGroupMock) StartCalls() []struct {
} {
	var calls []struct {
	}
	lockConsumerGroupMockStart.RLock()
	calls = mock.calls.Start
	lockConsumerGroupMockStart.RUnlock()
	return calls
}

// State calls StateFunc.
func (mock *ConsumerGroupMock) State() string {
	if mock.StateFunc == nil {
		panic("ConsumerGroupMock.StateFunc: method is nil but ConsumerGroup.State was just called")
	}
	callInfo := struct {
	}{}
	lockConsumerGroupMockState.Lock()
	mock.calls.State = append(mock.calls.State, callInfo)
	lockConsumerGroupMockState.Unlock()
	return mock.StateFunc()
}

// StateCalls gets all the calls that were made to State.
// Check the length with:
//     len(mockedConsumerGroup.StateCalls())
func (mock *ConsumerGroupMock) StateCalls() []struct {
} {
	var calls []struct {
	}
	lockConsumerGroupMockState.RLock()
	calls = mock.calls.State
	lockConsumerGroupMockState.RUnlock()
	return calls
}

// Stop calls StopFunc.
func (mock *ConsumerGroupMock) Stop() {
	if mock.StopFunc == nil {
		panic("ConsumerGroupMock.StopFunc: method is nil but ConsumerGroup.Stop was just called")
	}
	callInfo := struct {
	}{}
	lockConsumerGroupMockStop.Lock()
	mock.calls.Stop = append(mock.calls.Stop, callInfo)
	lockConsumerGroupMockStop.Unlock()
	mock.StopFunc()
}

// StopCalls gets all the calls that were made to Stop.
// Check the length with:
//     len(mockedConsumerGroup.StopCalls())
func (mock *ConsumerGroupMock) StopCalls() []struct {
} {
	var calls []struct {
	}
	lockConsumerGroupMockStop.RLock()
	calls = mock.calls.Stop
	lockConsumerGroupMockStop.RUnlock()
	return calls
}
