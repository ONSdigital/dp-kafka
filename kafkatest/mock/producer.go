// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-kafka/v3/producer"
	"sync"
)

var (
	lockProducerMockChannels      sync.RWMutex
	lockProducerMockChecker       sync.RWMutex
	lockProducerMockClose         sync.RWMutex
	lockProducerMockInitialise    sync.RWMutex
	lockProducerMockIsInitialised sync.RWMutex
	lockProducerMockLogErrors     sync.RWMutex
)

// ProducerMock is a mock implementation of kafkatest.Producer.
//
//     func TestSomethingThatUsesProducer(t *testing.T) {
//
//         // make and configure a mocked kafkatest.Producer
//         mockedProducer := &ProducerMock{
//             ChannelsFunc: func() *producer.ProducerChannels {
// 	               panic("mock out the Channels method")
//             },
//             CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
// 	               panic("mock out the Checker method")
//             },
//             CloseFunc: func(ctx context.Context) error {
// 	               panic("mock out the Close method")
//             },
//             InitialiseFunc: func(ctx context.Context) error {
// 	               panic("mock out the Initialise method")
//             },
//             IsInitialisedFunc: func() bool {
// 	               panic("mock out the IsInitialised method")
//             },
//             LogErrorsFunc: func(ctx context.Context)  {
// 	               panic("mock out the LogErrors method")
//             },
//         }
//
//         // use mockedProducer in code that requires kafkatest.Producer
//         // and then make assertions.
//
//     }
type ProducerMock struct {
	// ChannelsFunc mocks the Channels method.
	ChannelsFunc func() *producer.Channels

	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// InitialiseFunc mocks the Initialise method.
	InitialiseFunc func(ctx context.Context) error

	// IsInitialisedFunc mocks the IsInitialised method.
	IsInitialisedFunc func() bool

	// LogErrorsFunc mocks the LogErrors method.
	LogErrorsFunc func(ctx context.Context)

	// calls tracks calls to the methods.
	calls struct {
		// Channels holds details about calls to the Channels method.
		Channels []struct {
		}
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Initialise holds details about calls to the Initialise method.
		Initialise []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// IsInitialised holds details about calls to the IsInitialised method.
		IsInitialised []struct {
		}
		// LogErrors holds details about calls to the LogErrors method.
		LogErrors []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// Channels calls ChannelsFunc.
func (mock *ProducerMock) Channels() *producer.Channels {
	if mock.ChannelsFunc == nil {
		panic("ProducerMock.ChannelsFunc: method is nil but Producer.Channels was just called")
	}
	callInfo := struct {
	}{}
	lockProducerMockChannels.Lock()
	mock.calls.Channels = append(mock.calls.Channels, callInfo)
	lockProducerMockChannels.Unlock()
	return mock.ChannelsFunc()
}

// ChannelsCalls gets all the calls that were made to Channels.
// Check the length with:
//     len(mockedProducer.ChannelsCalls())
func (mock *ProducerMock) ChannelsCalls() []struct {
} {
	var calls []struct {
	}
	lockProducerMockChannels.RLock()
	calls = mock.calls.Channels
	lockProducerMockChannels.RUnlock()
	return calls
}

// Checker calls CheckerFunc.
func (mock *ProducerMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("ProducerMock.CheckerFunc: method is nil but Producer.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	lockProducerMockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	lockProducerMockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedProducer.CheckerCalls())
func (mock *ProducerMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	lockProducerMockChecker.RLock()
	calls = mock.calls.Checker
	lockProducerMockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *ProducerMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("ProducerMock.CloseFunc: method is nil but Producer.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockProducerMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockProducerMockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedProducer.CloseCalls())
func (mock *ProducerMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockProducerMockClose.RLock()
	calls = mock.calls.Close
	lockProducerMockClose.RUnlock()
	return calls
}

// Initialise calls InitialiseFunc.
func (mock *ProducerMock) Initialise(ctx context.Context) error {
	if mock.InitialiseFunc == nil {
		panic("ProducerMock.InitialiseFunc: method is nil but Producer.Initialise was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockProducerMockInitialise.Lock()
	mock.calls.Initialise = append(mock.calls.Initialise, callInfo)
	lockProducerMockInitialise.Unlock()
	return mock.InitialiseFunc(ctx)
}

// InitialiseCalls gets all the calls that were made to Initialise.
// Check the length with:
//     len(mockedProducer.InitialiseCalls())
func (mock *ProducerMock) InitialiseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockProducerMockInitialise.RLock()
	calls = mock.calls.Initialise
	lockProducerMockInitialise.RUnlock()
	return calls
}

// IsInitialised calls IsInitialisedFunc.
func (mock *ProducerMock) IsInitialised() bool {
	if mock.IsInitialisedFunc == nil {
		panic("ProducerMock.IsInitialisedFunc: method is nil but Producer.IsInitialised was just called")
	}
	callInfo := struct {
	}{}
	lockProducerMockIsInitialised.Lock()
	mock.calls.IsInitialised = append(mock.calls.IsInitialised, callInfo)
	lockProducerMockIsInitialised.Unlock()
	return mock.IsInitialisedFunc()
}

// IsInitialisedCalls gets all the calls that were made to IsInitialised.
// Check the length with:
//     len(mockedProducer.IsInitialisedCalls())
func (mock *ProducerMock) IsInitialisedCalls() []struct {
} {
	var calls []struct {
	}
	lockProducerMockIsInitialised.RLock()
	calls = mock.calls.IsInitialised
	lockProducerMockIsInitialised.RUnlock()
	return calls
}

// LogErrors calls LogErrorsFunc.
func (mock *ProducerMock) LogErrors(ctx context.Context) {
	if mock.LogErrorsFunc == nil {
		panic("ProducerMock.LogErrorsFunc: method is nil but Producer.LogErrors was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockProducerMockLogErrors.Lock()
	mock.calls.LogErrors = append(mock.calls.LogErrors, callInfo)
	lockProducerMockLogErrors.Unlock()
	mock.LogErrorsFunc(ctx)
}

// LogErrorsCalls gets all the calls that were made to LogErrors.
// Check the length with:
//     len(mockedProducer.LogErrorsCalls())
func (mock *ProducerMock) LogErrorsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockProducerMockLogErrors.RLock()
	calls = mock.calls.LogErrors
	lockProducerMockLogErrors.RUnlock()
	return calls
}
