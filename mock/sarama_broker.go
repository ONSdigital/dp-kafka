// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-kafka/v3/interfaces"
	"github.com/Shopify/sarama"
	"sync"
)

// Ensure, that SaramaBrokerMock does implement interfaces.SaramaBroker.
// If this is not the case, regenerate this file with moq.
var _ interfaces.SaramaBroker = &SaramaBrokerMock{}

// SaramaBrokerMock is a mock implementation of interfaces.SaramaBroker.
//
// 	func TestSomethingThatUsesSaramaBroker(t *testing.T) {
//
// 		// make and configure a mocked interfaces.SaramaBroker
// 		mockedSaramaBroker := &SaramaBrokerMock{
// 			AddrFunc: func() string {
// 				panic("mock out the Addr method")
// 			},
// 			CloseFunc: func() error {
// 				panic("mock out the Close method")
// 			},
// 			ConnectedFunc: func() (bool, error) {
// 				panic("mock out the Connected method")
// 			},
// 			GetMetadataFunc: func(request *sarama.MetadataRequest) (*sarama.MetadataResponse, error) {
// 				panic("mock out the GetMetadata method")
// 			},
// 			OpenFunc: func(conf *sarama.Config) error {
// 				panic("mock out the Open method")
// 			},
// 		}
//
// 		// use mockedSaramaBroker in code that requires interfaces.SaramaBroker
// 		// and then make assertions.
//
// 	}
type SaramaBrokerMock struct {
	// AddrFunc mocks the Addr method.
	AddrFunc func() string

	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// ConnectedFunc mocks the Connected method.
	ConnectedFunc func() (bool, error)

	// GetMetadataFunc mocks the GetMetadata method.
	GetMetadataFunc func(request *sarama.MetadataRequest) (*sarama.MetadataResponse, error)

	// OpenFunc mocks the Open method.
	OpenFunc func(conf *sarama.Config) error

	// calls tracks calls to the methods.
	calls struct {
		// Addr holds details about calls to the Addr method.
		Addr []struct {
		}
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Connected holds details about calls to the Connected method.
		Connected []struct {
		}
		// GetMetadata holds details about calls to the GetMetadata method.
		GetMetadata []struct {
			// Request is the request argument value.
			Request *sarama.MetadataRequest
		}
		// Open holds details about calls to the Open method.
		Open []struct {
			// Conf is the conf argument value.
			Conf *sarama.Config
		}
	}
	lockAddr        sync.RWMutex
	lockClose       sync.RWMutex
	lockConnected   sync.RWMutex
	lockGetMetadata sync.RWMutex
	lockOpen        sync.RWMutex
}

// Addr calls AddrFunc.
func (mock *SaramaBrokerMock) Addr() string {
	if mock.AddrFunc == nil {
		panic("SaramaBrokerMock.AddrFunc: method is nil but SaramaBroker.Addr was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAddr.Lock()
	mock.calls.Addr = append(mock.calls.Addr, callInfo)
	mock.lockAddr.Unlock()
	return mock.AddrFunc()
}

// AddrCalls gets all the calls that were made to Addr.
// Check the length with:
//     len(mockedSaramaBroker.AddrCalls())
func (mock *SaramaBrokerMock) AddrCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockAddr.RLock()
	calls = mock.calls.Addr
	mock.lockAddr.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *SaramaBrokerMock) Close() error {
	if mock.CloseFunc == nil {
		panic("SaramaBrokerMock.CloseFunc: method is nil but SaramaBroker.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedSaramaBroker.CloseCalls())
func (mock *SaramaBrokerMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Connected calls ConnectedFunc.
func (mock *SaramaBrokerMock) Connected() (bool, error) {
	if mock.ConnectedFunc == nil {
		panic("SaramaBrokerMock.ConnectedFunc: method is nil but SaramaBroker.Connected was just called")
	}
	callInfo := struct {
	}{}
	mock.lockConnected.Lock()
	mock.calls.Connected = append(mock.calls.Connected, callInfo)
	mock.lockConnected.Unlock()
	return mock.ConnectedFunc()
}

// ConnectedCalls gets all the calls that were made to Connected.
// Check the length with:
//     len(mockedSaramaBroker.ConnectedCalls())
func (mock *SaramaBrokerMock) ConnectedCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockConnected.RLock()
	calls = mock.calls.Connected
	mock.lockConnected.RUnlock()
	return calls
}

// GetMetadata calls GetMetadataFunc.
func (mock *SaramaBrokerMock) GetMetadata(request *sarama.MetadataRequest) (*sarama.MetadataResponse, error) {
	if mock.GetMetadataFunc == nil {
		panic("SaramaBrokerMock.GetMetadataFunc: method is nil but SaramaBroker.GetMetadata was just called")
	}
	callInfo := struct {
		Request *sarama.MetadataRequest
	}{
		Request: request,
	}
	mock.lockGetMetadata.Lock()
	mock.calls.GetMetadata = append(mock.calls.GetMetadata, callInfo)
	mock.lockGetMetadata.Unlock()
	return mock.GetMetadataFunc(request)
}

// GetMetadataCalls gets all the calls that were made to GetMetadata.
// Check the length with:
//     len(mockedSaramaBroker.GetMetadataCalls())
func (mock *SaramaBrokerMock) GetMetadataCalls() []struct {
	Request *sarama.MetadataRequest
} {
	var calls []struct {
		Request *sarama.MetadataRequest
	}
	mock.lockGetMetadata.RLock()
	calls = mock.calls.GetMetadata
	mock.lockGetMetadata.RUnlock()
	return calls
}

// Open calls OpenFunc.
func (mock *SaramaBrokerMock) Open(conf *sarama.Config) error {
	if mock.OpenFunc == nil {
		panic("SaramaBrokerMock.OpenFunc: method is nil but SaramaBroker.Open was just called")
	}
	callInfo := struct {
		Conf *sarama.Config
	}{
		Conf: conf,
	}
	mock.lockOpen.Lock()
	mock.calls.Open = append(mock.calls.Open, callInfo)
	mock.lockOpen.Unlock()
	return mock.OpenFunc(conf)
}

// OpenCalls gets all the calls that were made to Open.
// Check the length with:
//     len(mockedSaramaBroker.OpenCalls())
func (mock *SaramaBrokerMock) OpenCalls() []struct {
	Conf *sarama.Config
} {
	var calls []struct {
		Conf *sarama.Config
	}
	mock.lockOpen.RLock()
	calls = mock.calls.Open
	mock.lockOpen.RUnlock()
	return calls
}
