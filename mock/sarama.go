// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-kafka"
	"github.com/Shopify/sarama"
	"sync"
)

var (
	lockSaramaMockNewAsyncProducer sync.RWMutex
)

// Ensure, that SaramaMock does implement kafka.Sarama.
// If this is not the case, regenerate this file with moq.
var _ kafka.Sarama = &SaramaMock{}

// SaramaMock is a mock implementation of kafka.Sarama.
//
//     func TestSomethingThatUsesSarama(t *testing.T) {
//
//         // make and configure a mocked kafka.Sarama
//         mockedSarama := &SaramaMock{
//             NewAsyncProducerFunc: func(addrs []string, conf *sarama.Config) (sarama.AsyncProducer, error) {
// 	               panic("mock out the NewAsyncProducer method")
//             },
//         }
//
//         // use mockedSarama in code that requires kafka.Sarama
//         // and then make assertions.
//
//     }
type SaramaMock struct {
	// NewAsyncProducerFunc mocks the NewAsyncProducer method.
	NewAsyncProducerFunc func(addrs []string, conf *sarama.Config) (sarama.AsyncProducer, error)

	// calls tracks calls to the methods.
	calls struct {
		// NewAsyncProducer holds details about calls to the NewAsyncProducer method.
		NewAsyncProducer []struct {
			// Addrs is the addrs argument value.
			Addrs []string
			// Conf is the conf argument value.
			Conf *sarama.Config
		}
	}
}

// NewAsyncProducer calls NewAsyncProducerFunc.
func (mock *SaramaMock) NewAsyncProducer(addrs []string, conf *sarama.Config) (sarama.AsyncProducer, error) {
	if mock.NewAsyncProducerFunc == nil {
		panic("SaramaMock.NewAsyncProducerFunc: method is nil but Sarama.NewAsyncProducer was just called")
	}
	callInfo := struct {
		Addrs []string
		Conf  *sarama.Config
	}{
		Addrs: addrs,
		Conf:  conf,
	}
	lockSaramaMockNewAsyncProducer.Lock()
	mock.calls.NewAsyncProducer = append(mock.calls.NewAsyncProducer, callInfo)
	lockSaramaMockNewAsyncProducer.Unlock()
	return mock.NewAsyncProducerFunc(addrs, conf)
}

// NewAsyncProducerCalls gets all the calls that were made to NewAsyncProducer.
// Check the length with:
//     len(mockedSarama.NewAsyncProducerCalls())
func (mock *SaramaMock) NewAsyncProducerCalls() []struct {
	Addrs []string
	Conf  *sarama.Config
} {
	var calls []struct {
		Addrs []string
		Conf  *sarama.Config
	}
	lockSaramaMockNewAsyncProducer.RLock()
	calls = mock.calls.NewAsyncProducer
	lockSaramaMockNewAsyncProducer.RUnlock()
	return calls
}
