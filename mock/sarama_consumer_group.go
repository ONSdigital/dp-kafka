// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/Shopify/sarama"
	"sync"
)

var (
	lockSaramaConsumerGroupMockClose   sync.RWMutex
	lockSaramaConsumerGroupMockConsume sync.RWMutex
	lockSaramaConsumerGroupMockErrors  sync.RWMutex
)

// SaramaConsumerGroupMock is a mock implementation of kafka.SaramaConsumerGroup.
//
//     func TestSomethingThatUsesSaramaConsumerGroup(t *testing.T) {
//
//         // make and configure a mocked kafka.SaramaConsumerGroup
//         mockedSaramaConsumerGroup := &SaramaConsumerGroupMock{
//             CloseFunc: func() error {
// 	               panic("mock out the Close method")
//             },
//             ConsumeFunc: func(ctx context.Context, topics []string, handler sarama.ConsumerGroupHandler) error {
// 	               panic("mock out the Consume method")
//             },
//             ErrorsFunc: func() <-chan error {
// 	               panic("mock out the Errors method")
//             },
//         }
//
//         // use mockedSaramaConsumerGroup in code that requires kafka.SaramaConsumerGroup
//         // and then make assertions.
//
//     }
type SaramaConsumerGroupMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// ConsumeFunc mocks the Consume method.
	ConsumeFunc func(ctx context.Context, topics []string, handler sarama.ConsumerGroupHandler) error

	// ErrorsFunc mocks the Errors method.
	ErrorsFunc func() <-chan error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Consume holds details about calls to the Consume method.
		Consume []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Topics is the topics argument value.
			Topics []string
			// Handler is the handler argument value.
			Handler sarama.ConsumerGroupHandler
		}
		// Errors holds details about calls to the Errors method.
		Errors []struct {
		}
	}
}

// Close calls CloseFunc.
func (mock *SaramaConsumerGroupMock) Close() error {
	if mock.CloseFunc == nil {
		panic("SaramaConsumerGroupMock.CloseFunc: method is nil but SaramaConsumerGroup.Close was just called")
	}
	callInfo := struct {
	}{}
	lockSaramaConsumerGroupMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockSaramaConsumerGroupMockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedSaramaConsumerGroup.CloseCalls())
func (mock *SaramaConsumerGroupMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	lockSaramaConsumerGroupMockClose.RLock()
	calls = mock.calls.Close
	lockSaramaConsumerGroupMockClose.RUnlock()
	return calls
}

// Consume calls ConsumeFunc.
func (mock *SaramaConsumerGroupMock) Consume(ctx context.Context, topics []string, handler sarama.ConsumerGroupHandler) error {
	if mock.ConsumeFunc == nil {
		panic("SaramaConsumerGroupMock.ConsumeFunc: method is nil but SaramaConsumerGroup.Consume was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Topics  []string
		Handler sarama.ConsumerGroupHandler
	}{
		Ctx:     ctx,
		Topics:  topics,
		Handler: handler,
	}
	lockSaramaConsumerGroupMockConsume.Lock()
	mock.calls.Consume = append(mock.calls.Consume, callInfo)
	lockSaramaConsumerGroupMockConsume.Unlock()
	return mock.ConsumeFunc(ctx, topics, handler)
}

// ConsumeCalls gets all the calls that were made to Consume.
// Check the length with:
//     len(mockedSaramaConsumerGroup.ConsumeCalls())
func (mock *SaramaConsumerGroupMock) ConsumeCalls() []struct {
	Ctx     context.Context
	Topics  []string
	Handler sarama.ConsumerGroupHandler
} {
	var calls []struct {
		Ctx     context.Context
		Topics  []string
		Handler sarama.ConsumerGroupHandler
	}
	lockSaramaConsumerGroupMockConsume.RLock()
	calls = mock.calls.Consume
	lockSaramaConsumerGroupMockConsume.RUnlock()
	return calls
}

// Errors calls ErrorsFunc.
func (mock *SaramaConsumerGroupMock) Errors() <-chan error {
	if mock.ErrorsFunc == nil {
		panic("SaramaConsumerGroupMock.ErrorsFunc: method is nil but SaramaConsumerGroup.Errors was just called")
	}
	callInfo := struct {
	}{}
	lockSaramaConsumerGroupMockErrors.Lock()
	mock.calls.Errors = append(mock.calls.Errors, callInfo)
	lockSaramaConsumerGroupMockErrors.Unlock()
	return mock.ErrorsFunc()
}

// ErrorsCalls gets all the calls that were made to Errors.
// Check the length with:
//     len(mockedSaramaConsumerGroup.ErrorsCalls())
func (mock *SaramaConsumerGroupMock) ErrorsCalls() []struct {
} {
	var calls []struct {
	}
	lockSaramaConsumerGroupMockErrors.RLock()
	calls = mock.calls.Errors
	lockSaramaConsumerGroupMockErrors.RUnlock()
	return calls
}
