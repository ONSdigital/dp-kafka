// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-kafka/v3/interfaces"
	"github.com/Shopify/sarama"
	"sync"
)

// Ensure, that SaramaConsumerGroupMock does implement interfaces.SaramaConsumerGroup.
// If this is not the case, regenerate this file with moq.
var _ interfaces.SaramaConsumerGroup = &SaramaConsumerGroupMock{}

// SaramaConsumerGroupMock is a mock implementation of interfaces.SaramaConsumerGroup.
//
//	func TestSomethingThatUsesSaramaConsumerGroup(t *testing.T) {
//
//		// make and configure a mocked interfaces.SaramaConsumerGroup
//		mockedSaramaConsumerGroup := &SaramaConsumerGroupMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			ConsumeFunc: func(ctx context.Context, topics []string, handler sarama.ConsumerGroupHandler) error {
//				panic("mock out the Consume method")
//			},
//			ErrorsFunc: func() <-chan error {
//				panic("mock out the Errors method")
//			},
//			PauseFunc: func(partitions map[string][]int32)  {
//				panic("mock out the Pause method")
//			},
//			PauseAllFunc: func()  {
//				panic("mock out the PauseAll method")
//			},
//			ResumeFunc: func(partitions map[string][]int32)  {
//				panic("mock out the Resume method")
//			},
//			ResumeAllFunc: func()  {
//				panic("mock out the ResumeAll method")
//			},
//		}
//
//		// use mockedSaramaConsumerGroup in code that requires interfaces.SaramaConsumerGroup
//		// and then make assertions.
//
//	}
type SaramaConsumerGroupMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// ConsumeFunc mocks the Consume method.
	ConsumeFunc func(ctx context.Context, topics []string, handler sarama.ConsumerGroupHandler) error

	// ErrorsFunc mocks the Errors method.
	ErrorsFunc func() <-chan error

	// PauseFunc mocks the Pause method.
	PauseFunc func(partitions map[string][]int32)

	// PauseAllFunc mocks the PauseAll method.
	PauseAllFunc func()

	// ResumeFunc mocks the Resume method.
	ResumeFunc func(partitions map[string][]int32)

	// ResumeAllFunc mocks the ResumeAll method.
	ResumeAllFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Consume holds details about calls to the Consume method.
		Consume []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Topics is the topics argument value.
			Topics []string
			// Handler is the handler argument value.
			Handler sarama.ConsumerGroupHandler
		}
		// Errors holds details about calls to the Errors method.
		Errors []struct {
		}
		// Pause holds details about calls to the Pause method.
		Pause []struct {
			// Partitions is the partitions argument value.
			Partitions map[string][]int32
		}
		// PauseAll holds details about calls to the PauseAll method.
		PauseAll []struct {
		}
		// Resume holds details about calls to the Resume method.
		Resume []struct {
			// Partitions is the partitions argument value.
			Partitions map[string][]int32
		}
		// ResumeAll holds details about calls to the ResumeAll method.
		ResumeAll []struct {
		}
	}
	lockClose     sync.RWMutex
	lockConsume   sync.RWMutex
	lockErrors    sync.RWMutex
	lockPause     sync.RWMutex
	lockPauseAll  sync.RWMutex
	lockResume    sync.RWMutex
	lockResumeAll sync.RWMutex
}

// Close calls CloseFunc.
func (mock *SaramaConsumerGroupMock) Close() error {
	if mock.CloseFunc == nil {
		panic("SaramaConsumerGroupMock.CloseFunc: method is nil but SaramaConsumerGroup.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedSaramaConsumerGroup.CloseCalls())
func (mock *SaramaConsumerGroupMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Consume calls ConsumeFunc.
func (mock *SaramaConsumerGroupMock) Consume(ctx context.Context, topics []string, handler sarama.ConsumerGroupHandler) error {
	if mock.ConsumeFunc == nil {
		panic("SaramaConsumerGroupMock.ConsumeFunc: method is nil but SaramaConsumerGroup.Consume was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Topics  []string
		Handler sarama.ConsumerGroupHandler
	}{
		Ctx:     ctx,
		Topics:  topics,
		Handler: handler,
	}
	mock.lockConsume.Lock()
	mock.calls.Consume = append(mock.calls.Consume, callInfo)
	mock.lockConsume.Unlock()
	return mock.ConsumeFunc(ctx, topics, handler)
}

// ConsumeCalls gets all the calls that were made to Consume.
// Check the length with:
//
//	len(mockedSaramaConsumerGroup.ConsumeCalls())
func (mock *SaramaConsumerGroupMock) ConsumeCalls() []struct {
	Ctx     context.Context
	Topics  []string
	Handler sarama.ConsumerGroupHandler
} {
	var calls []struct {
		Ctx     context.Context
		Topics  []string
		Handler sarama.ConsumerGroupHandler
	}
	mock.lockConsume.RLock()
	calls = mock.calls.Consume
	mock.lockConsume.RUnlock()
	return calls
}

// Errors calls ErrorsFunc.
func (mock *SaramaConsumerGroupMock) Errors() <-chan error {
	if mock.ErrorsFunc == nil {
		panic("SaramaConsumerGroupMock.ErrorsFunc: method is nil but SaramaConsumerGroup.Errors was just called")
	}
	callInfo := struct {
	}{}
	mock.lockErrors.Lock()
	mock.calls.Errors = append(mock.calls.Errors, callInfo)
	mock.lockErrors.Unlock()
	return mock.ErrorsFunc()
}

// ErrorsCalls gets all the calls that were made to Errors.
// Check the length with:
//
//	len(mockedSaramaConsumerGroup.ErrorsCalls())
func (mock *SaramaConsumerGroupMock) ErrorsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockErrors.RLock()
	calls = mock.calls.Errors
	mock.lockErrors.RUnlock()
	return calls
}

// Pause calls PauseFunc.
func (mock *SaramaConsumerGroupMock) Pause(partitions map[string][]int32) {
	if mock.PauseFunc == nil {
		panic("SaramaConsumerGroupMock.PauseFunc: method is nil but SaramaConsumerGroup.Pause was just called")
	}
	callInfo := struct {
		Partitions map[string][]int32
	}{
		Partitions: partitions,
	}
	mock.lockPause.Lock()
	mock.calls.Pause = append(mock.calls.Pause, callInfo)
	mock.lockPause.Unlock()
	mock.PauseFunc(partitions)
}

// PauseCalls gets all the calls that were made to Pause.
// Check the length with:
//
//	len(mockedSaramaConsumerGroup.PauseCalls())
func (mock *SaramaConsumerGroupMock) PauseCalls() []struct {
	Partitions map[string][]int32
} {
	var calls []struct {
		Partitions map[string][]int32
	}
	mock.lockPause.RLock()
	calls = mock.calls.Pause
	mock.lockPause.RUnlock()
	return calls
}

// PauseAll calls PauseAllFunc.
func (mock *SaramaConsumerGroupMock) PauseAll() {
	if mock.PauseAllFunc == nil {
		panic("SaramaConsumerGroupMock.PauseAllFunc: method is nil but SaramaConsumerGroup.PauseAll was just called")
	}
	callInfo := struct {
	}{}
	mock.lockPauseAll.Lock()
	mock.calls.PauseAll = append(mock.calls.PauseAll, callInfo)
	mock.lockPauseAll.Unlock()
	mock.PauseAllFunc()
}

// PauseAllCalls gets all the calls that were made to PauseAll.
// Check the length with:
//
//	len(mockedSaramaConsumerGroup.PauseAllCalls())
func (mock *SaramaConsumerGroupMock) PauseAllCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPauseAll.RLock()
	calls = mock.calls.PauseAll
	mock.lockPauseAll.RUnlock()
	return calls
}

// Resume calls ResumeFunc.
func (mock *SaramaConsumerGroupMock) Resume(partitions map[string][]int32) {
	if mock.ResumeFunc == nil {
		panic("SaramaConsumerGroupMock.ResumeFunc: method is nil but SaramaConsumerGroup.Resume was just called")
	}
	callInfo := struct {
		Partitions map[string][]int32
	}{
		Partitions: partitions,
	}
	mock.lockResume.Lock()
	mock.calls.Resume = append(mock.calls.Resume, callInfo)
	mock.lockResume.Unlock()
	mock.ResumeFunc(partitions)
}

// ResumeCalls gets all the calls that were made to Resume.
// Check the length with:
//
//	len(mockedSaramaConsumerGroup.ResumeCalls())
func (mock *SaramaConsumerGroupMock) ResumeCalls() []struct {
	Partitions map[string][]int32
} {
	var calls []struct {
		Partitions map[string][]int32
	}
	mock.lockResume.RLock()
	calls = mock.calls.Resume
	mock.lockResume.RUnlock()
	return calls
}

// ResumeAll calls ResumeAllFunc.
func (mock *SaramaConsumerGroupMock) ResumeAll() {
	if mock.ResumeAllFunc == nil {
		panic("SaramaConsumerGroupMock.ResumeAllFunc: method is nil but SaramaConsumerGroup.ResumeAll was just called")
	}
	callInfo := struct {
	}{}
	mock.lockResumeAll.Lock()
	mock.calls.ResumeAll = append(mock.calls.ResumeAll, callInfo)
	mock.lockResumeAll.Unlock()
	mock.ResumeAllFunc()
}

// ResumeAllCalls gets all the calls that were made to ResumeAll.
// Check the length with:
//
//	len(mockedSaramaConsumerGroup.ResumeAllCalls())
func (mock *SaramaConsumerGroupMock) ResumeAllCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockResumeAll.RLock()
	calls = mock.calls.ResumeAll
	mock.lockResumeAll.RUnlock()
	return calls
}
