// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-kafka"
	"github.com/bsm/sarama-cluster"
	"sync"
)

var (
	lockSaramaClusterMockNewConsumer sync.RWMutex
)

// Ensure, that SaramaClusterMock does implement kafka.SaramaCluster.
// If this is not the case, regenerate this file with moq.
var _ kafka.SaramaCluster = &SaramaClusterMock{}

// SaramaClusterMock is a mock implementation of kafka.SaramaCluster.
//
//     func TestSomethingThatUsesSaramaCluster(t *testing.T) {
//
//         // make and configure a mocked kafka.SaramaCluster
//         mockedSaramaCluster := &SaramaClusterMock{
//             NewConsumerFunc: func(addrs []string, groupID string, topics []string, config *cluster.Config) (kafka.SaramaClusterConsumer, error) {
// 	               panic("mock out the NewConsumer method")
//             },
//         }
//
//         // use mockedSaramaCluster in code that requires kafka.SaramaCluster
//         // and then make assertions.
//
//     }
type SaramaClusterMock struct {
	// NewConsumerFunc mocks the NewConsumer method.
	NewConsumerFunc func(addrs []string, groupID string, topics []string, config *cluster.Config) (kafka.SaramaClusterConsumer, error)

	// calls tracks calls to the methods.
	calls struct {
		// NewConsumer holds details about calls to the NewConsumer method.
		NewConsumer []struct {
			// Addrs is the addrs argument value.
			Addrs []string
			// GroupID is the groupID argument value.
			GroupID string
			// Topics is the topics argument value.
			Topics []string
			// Config is the config argument value.
			Config *cluster.Config
		}
	}
}

// NewConsumer calls NewConsumerFunc.
func (mock *SaramaClusterMock) NewConsumer(addrs []string, groupID string, topics []string, config *cluster.Config) (kafka.SaramaClusterConsumer, error) {
	if mock.NewConsumerFunc == nil {
		panic("SaramaClusterMock.NewConsumerFunc: method is nil but SaramaCluster.NewConsumer was just called")
	}
	callInfo := struct {
		Addrs   []string
		GroupID string
		Topics  []string
		Config  *cluster.Config
	}{
		Addrs:   addrs,
		GroupID: groupID,
		Topics:  topics,
		Config:  config,
	}
	lockSaramaClusterMockNewConsumer.Lock()
	mock.calls.NewConsumer = append(mock.calls.NewConsumer, callInfo)
	lockSaramaClusterMockNewConsumer.Unlock()
	return mock.NewConsumerFunc(addrs, groupID, topics, config)
}

// NewConsumerCalls gets all the calls that were made to NewConsumer.
// Check the length with:
//     len(mockedSaramaCluster.NewConsumerCalls())
func (mock *SaramaClusterMock) NewConsumerCalls() []struct {
	Addrs   []string
	GroupID string
	Topics  []string
	Config  *cluster.Config
} {
	var calls []struct {
		Addrs   []string
		GroupID string
		Topics  []string
		Config  *cluster.Config
	}
	lockSaramaClusterMockNewConsumer.RLock()
	calls = mock.calls.NewConsumer
	lockSaramaClusterMockNewConsumer.RUnlock()
	return calls
}
